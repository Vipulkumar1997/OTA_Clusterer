{
  "size": 0,
  "query": {
    "match_all": {}
  },
  "aggs": {
    "three-word-phrases": {
      "terms": {
        "field": "content",
        "size": 100
      }
    }
  }
}


http://localhost:9200/fess.search/_field_stats?fields=content


{
   "size":0,
   "aggs":{
      "top-terms-aggregation":{
         "terms":{
            "field":"field_name",
            "size":10
         }
      }
   }
}


{
  "filter": {
    "term": {
      "_id": "https:%2F%2Fwww.ab-in-den-urlaub.de%2Flastminute-eigene-anreise.htm;role=Rguest"
    }
  }
}




{
  "docs": [
    {
      "_index": "fess.search",
      "_type": "doc"
    },
    {
      "_index": "fess.search",
      "_type": "doc"
    }
  ]
}



fess.20171013/_search
{
  "aggs": {
    "distinct_name_count": {
      "cardinality": {
        "field": "content"
      }
    }
  }
}


Using Kibana DEV Console - working to get the document only, in FESS use POST instead of GET!

GET fess.20171013/_search
{
  "query": {
    "terms": {
      "doc_id": [ "e533eb84c4c24ff681c711cae3c342d123" ]
    }
  }
}


#### update the content mapping in the dev console of Kibana
PUT fess.20171013/doc/_mapping
{
        "properties": {
          "content": {
            "type": "langstring",
            "term_vector": "with_positions_offsets",
            "analyzer": "standard_analyzer",
            "lang_field": "lang",
            "lang_base_name": "",
            "fielddata": true
          }
        }

}

### updated the language analyzer to german ###
  PUT fess.20171013/doc/_mapping
  {
          "properties": {
            "content": {
              "type": "langstring",
              "term_vector": "with_positions_offsets",
              "analyzer": "german",
              "lang_field": "lang",
              "lang_base_name": "",
              "fielddata": true
          }
        }

  }


### used this query to get the word counts ###
curl -XGET 'http://localhost:9200/t/data/_search?search_type=count&pretty' -d '{
  "query": {
    "match_all" : {}
  },
  "aggs" : {
      "mydata_agg" : {
    "terms": {"field" : "content"}
    }
  }
}'

### alternativ way - same like above ###

GET /fess.20171013/doc/_search?pretty
{

  "aggs": {

    "all_interests": {

      "terms": { "field": "content" }

    }

  }

}

### create a own stemmer ### ---> describe what stemming is in the paper

PUT /my_index
{
    "settings": {
        "analysis" : {
            "analyzer" : {
                "my_analyzer" : {
                    "tokenizer" : "standard",
                    "filter" : ["standard", "lowercase", "my_stemmer"]
                }
            },
            "filter" : {
                "my_stemmer" : {
                    "type" : "stemmer",
                    "name" : "light_german"
                }
            }
        }
    }
}


### accessing the field definition ###
GET fess.20171013/_mapping/field/content

#get to the understand what it does
GET fess.20171013/_search?pretty&filter_path=took,hits.hits._id,hits.hits._score'


### FINALLY - How To access individual fields ### --> get the title field
GET fess.20171013/_search?pretty&filter_path=hits.hits._source.title

### Build Tagcloud ###
POST /fess.20171013/doc/_search?&pretty=true
{
"aggs": {
    "tagcloud": {
        "terms": {
            "field": "content",
            "size": 200
        }
    }
}

}

### just get the counts ###
POST /fess.20171013/doc/_search?&pretty=true
{
"size": 0,
"aggs": {
    "tagcloud": {
        "terms": {
            "field": "content",
            "size": 200
        }
    }
}

}
